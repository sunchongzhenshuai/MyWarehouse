<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 数据源 -->
	<!-- SqlSession工厂 -->
	<!-- Mapper的自动扫描 -->
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/rbac"></property>
		<property name="user" value="root"></property>
		<property name="password" value="123456"></property>
	</bean>
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 指定MyBatis的核心配置文件 -->
		<property name="configLocation" value="classpath:SqlMapConfig.xml"></property>
	</bean>
	
	<!-- 扫描Mapper下的所有接口
		自动创建每个接口对应的Bean对象
		<bean>
		BumenMapper接口
		扫描完成后，会自动的创建一个Bean，id为接口名，首字母小写bumenMapper
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.st.rbac.mapper"></property>
	</bean>
	
	<!-- 自动扫描Service -->
	<context:component-scan base-package="com.st.rbac.service.impl"></context:component-scan>
	
		<!-- 配置事务 -->
	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 事务管理器，要管理连接对象上的事务，连接对象来源于，c3po链接池 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 事务通知 -->
	<!-- 通过Spring事务管理机制，配置事务的通知
		transaction-manager:指定事务的管理器
	 -->
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 	<!-- 事物的属性配置: 对哪些东西进行事务处理 -->
	 	<tx:attributes>
	 		  <!-- name: 需要进行事务处理的方法
	 		  		propagation : 事务的传播方式有七种
		 		  		PROPAGATION_REQUIRED : 如果当前有事务，直接使用，如果没有，创建一个事务
		 		  		PROPAGATION_SUPPORTS:如果当前有事务，直接使用，如果没有，以非事务执行
		 		  		https://www.cnblogs.com/originate918/p/6226342/html
	 		  		
	 		  		isolation : 事务的隔离级别五个
	 		  			1) 默认的事务处理
	 		  			2) 支持事务，可能产生脏读，不可重复度  幻读
	 		  			3) 不允许脏读，可以允许不可重复度  幻读
	 		  			4) 不允许脏读，不可重复读 可以允许幻读
	 		  			5) 都不允许
	 		  		
	 		  		rollback-for : 事务回滚的时机，
	 		  			Exception: 当方法执行异常时，抛出异常时，事务回滚
	 		  				如果方法没有抛出异常，食物将会提交
	 		  				
	 		  				如果在方法中使用Try Catch处理异常，事务也将会被提交
	 		   -->
	 		   <tx:method name="addSell" propagation="REQUIRED" rollback-for="Exception"/>
	 	</tx:attributes>
	 </tx:advice>
	 
	 <!-- 以AOP的方式配置事务 -->
	 <aop:config>
	 	
	 	<!-- 切入点 -->
	 	<aop:pointcut expression="execution(* com.st.rbac.service..*.*(..))" id="servicetx"/>
	 	
	 	<!-- 通知器代替切面 -->
	 	<aop:advisor advice-ref="txAdvice" pointcut-ref="servicetx"/>
	 	
	 </aop:config>
	
</beans>
